#!/bin/sh
# . "$(dirname "$0")/_/husky.sh"


# true=1
# false=0

getBranchName()
{
    echo $(git rev-parse --abbrev-ref HEAD)
}

isNewBranch()
{   
    local logQuery=$(
        git log --all --not \
            $(
                git rev-list --no-walk \
                --exclude=refs/heads/$(getBranchName) \
                --exclude=HEAD \
                --all
            )
        )  
    if [ -z $logQuery ]; then 
        echo true
    else
        echo false
    fi  
}

git show-ref --head | egrep heads

# commits=($(git rev-list --no-walk --all))
# for c in ${commits[@]}; do git name-rev --name-only $c; done


47399dcdd7ac85ac285504f575d8996f7eaff705 refs/heads/alpine
b6cae60d000dfba629d47cf06358eab12a977c33 refs/heads/debian
445b824cfbeeb3a505e248ce25d9874cc8b8ff38 refs/heads/develop
172889265485dbb4cc195b368aefaa811910a0ae refs/heads/foo
8a82109ebbc119a8b09f919730ba4fbb3d33a783 refs/heads/release
0fffae14d5ff5f5197af51f097ba36ccc2809bbd refs/heads/test-workflow
172889265485dbb4cc195b368aefaa811910a0ae refs/heads/test-workflows

172889265485dbb4cc195b368aefaa811910a0ae
8a82109ebbc119a8b09f919730ba4fbb3d33a783
445b824cfbeeb3a505e248ce25d9874cc8b8ff38
47399dcdd7ac85ac285504f575d8996f7eaff705
b6cae60d000dfba629d47cf06358eab12a977c33
0fffae14d5ff5f5197af51f097ba36ccc2809bbd

git diff-tree --no-commit-id --name-only -r <SHA1>
# or
git ls-tree -d --name-only -r <SHA1>


git show-ref --verify --quiet refs/heads/foo && echo "true" || echo "false"






function created(){
    git reflog --date=local | \
        grep checkout: | \
        grep "$1" | \
        tail -1 | \
        cut -d{ -f2 | \
        cut -d} -f1
}



branches=( $(git branch -v | sed -e 's/*/ /' | awk '{print $1}' ) )

for branch in ${branches[@]}; do
    # echo "$(created $branch)"
    echo "$(created $branch) $branch"
done | sort



