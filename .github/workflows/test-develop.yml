name: 'GitHub-CI: development tests'

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - '!release'
  # execute these tests on any branch that is not the 'release' branch,
  # as the 'release' branch should not have the 'tests' directory
jobs:
  test-action:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: validate tests exist
        uses: ./docker/develop/
        id: valid-tests
        with:
          cmd: |
            if [[ ! -d '/tests' ]]; then
              echo "::error file=tests,title=Missing tests::the tests directory does not appear to exist!";
              exit 1;
            fi;
            if [[ ! -f '/tests/sample.json' ]]; then
              echo "::error file=/tests/sample.json,title=Missing sample.json::'/tests/sample.json' does not exist"
              exit 2;
            fi;
            if [[ ! -f '/tests/test_bash.sh' ]]; then
              echo "::error file=/tests/test_bash.sh,title=Missing test_bash.sh::'/tests/test_bash.sh' does not exist"
              exit 3;
            fi;
            if [[ ! -f '/tests/test_jq.jq' ]]; then
              echo "::error file=/tests/test_jq.jq,title=Missing test_jq.jq::'/tests/test_jq.jq' does not exist"
              exit 4;
            fi;
            if [[ ! -x '/tests/test_bash.sh' ]]; then
              echo "::error file=/tests/test_bash.sh,title=Missing test_bash.sh::'/tests/test_bash.sh' is not executable"
              exit 5;
            fi;
            echo "tests are ready"

      - name: json file from repo
        uses: ./docker/develop/
        id: test-json-file-from-repo
        with:
          cmd: >
            jq -c 'keys' ./tests/sample.json

      - name: Check test-json-file-from-repo
        run: |
          (
          cat << EOF >/tmp/received.txt
          ${{ steps.test-json-file-from-repo.outputs.stdout }}
          EOF
          );
          (
          cat << 'EOF' >/tmp/expected.txt
          ["foo"]
          EOF
          );

          git diff --no-index /tmp/received.txt /tmp/expected.txt;

          if [[ $? -gt 0 ]]; then 
          (
          cat << 'EOF'
          stdout:'${{ steps.test-json-file-from-repo.output.stdout }}'
          stderr:'${{ steps.test-json-file-from-repo.output.stderr }}'
          exit_code:'${{ steps.test-json-file-from-repo.output.exit_code }}'
          EOF
          );
            exit 1
          fi

      - name: bash script from repo
        uses: ./docker/develop/
        id: test-bash-script-from-repo
        with:
          cmd: >
            ./tests/test_bash.sh

      - name: Check test-bash-script-from-repo
        run: >
          (
          cat << EOF >/tmp/received.txt
          ${{ steps.test-bash-script-from-repo.outputs.stdout }}
          EOF
          );
          (
          cat << 'EOF' >/tmp/expected.txt
          ["bar"]
          EOF
          );

          git diff --no-index /tmp/received.txt /tmp/expected.txt;

          if [[ $? -gt 0 ]]; then 
          (
          cat << 'EOF'
          stdout:'${{ steps.test-bash-script-from-repo.output.stdout }}'
          stderr:'${{ steps.test-bash-script-from-repo.output.stderr }}'
          exit_code:'${{ steps.test-bash-script-from-repo.output.exit_code }}'
          EOF
          );
            exit 1
          fi

      - name: jq-module from repo
        uses: ./docker/develop/
        id: test-jq-module-from-repo
        with:
          cmd: >
            jq -cn 'include "./tests/test_jq"; sample_function'

      - name: Check test-jq-module-from-repo
        run: >
          (
          cat << EOF >/tmp/received.txt
          ${{ steps.test-jq-module-from-repo.outputs.stdout }}
          EOF
          );
          (
          cat << 'EOF' >/tmp/expected.txt
          ["foo","bar"]
          EOF
          );

          git diff --no-index /tmp/received.txt /tmp/expected.txt;

          if [[ $? -gt 0 ]]; then 
          (
          cat << 'EOF'
          stdout:'${{ steps.test-jq-module-from-repo.output.stdout }}'
          stderr:'${{ steps.test-jq-module-from-repo.output.stderr }}'
          exit_code:'${{ steps.test-jq-module-from-repo.output.exit_code }}'
          EOF
          );
            exit 1
          fi
