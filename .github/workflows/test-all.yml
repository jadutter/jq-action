name: "GitHub-CI: valid jq and entrypoint"

on:
    push: {}
    pull_request: {}

jobs:
  test-action:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Show commit hash
        run: 'echo "commit hash is $(git rev-parse HEAD)"'

      - name: valid entrypoint
        uses: jadutter/jq-action@v0.0.0
        id: valid-entrypoint
        with:
          cmd: >
            if [ ! -f '/entrypoint.sh' ]; then
              echo "forgot to add entrypoint.sh" >&2
              exit 1
            fi;
            if [ ! -x '/entrypoint.sh' ]; then
              echo "forgot to make entrypoint.sh executable" >&2
              exit 2
            fi;
            echo "entrypoint is valid"

      - name: Get jq version
        uses: jadutter/jq-action@v0.0.0
        id: version
        with:
          cmd: 'jq --version'

      - name: Show version
        run: 'echo "jq version is ${{ steps.version.outputs.stdout }}"'
      
      - name: Check version
        run: >
          if [[ "$(
            echo "${{ steps.version.outputs.stdout }}" |
            egrep -o 'jq-.+' | 
            wc -m )" -lt 4 ]]; then 
            echo "stdout:"
            echo "${{ steps.version.outputs.stdout }}"
            echo "stderr:"
            echo "${{ steps.version.outputs.stderr }}"
            echo "exit_code:"
            echo "${{ steps.version.outputs.exit_code }}"
            exit 1
          fi  

      - name: use jq
        uses: jadutter/jq-action@v0.0.0
        id: test-use-jq
        with:
          cmd: 'jq -cn "{foo:\"bar\"} | [.foo]" '

      - name: Check usage
        run: >
          if [[ ! "${{ steps.test-use-jq.outputs.stdout }}" == "[\"bar\"]" ]]; then 
            echo "stdout:"
            echo "${{ steps.test-use-jq.outputs.stdout }}"
            echo "stderr:"
            echo "${{ steps.test-use-jq.outputs.stderr }}"
            echo "exit_code:"
            echo "${{ steps.test-use-jq.outputs.exit_code }}"
            exit 1
          fi  

      - name: multi-line command
        uses: jadutter/jq-action@v0.0.0
        id: test-use-jq-multi-line
        with:
          # use YAML folded style 
          cmd: >
            echo '{"foo":"bar"}' | 
            jq '.foo == "bar"'

      - name: Check multiline usage
        run: >
          if [[ "${{ steps.test-use-jq-multi-line.outputs.stdout }}" != "true" ]]; then 
            echo "stdout:"
            echo "${{ steps.test-use-jq-multi-line.outputs.stdout }}"
            echo "stderr:"
            echo "${{ steps.test-use-jq-multi-line.outputs.stderr }}"
            echo "exit_code:"
            echo "${{ steps.test-use-jq-multi-line.outputs.exit_code }}"
            exit 1
          fi  

